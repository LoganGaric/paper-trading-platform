services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: paper-trading-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-paper_trading}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-paper_trading}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - paper-trading-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: paper-trading-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./infra/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - paper-trading-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: paper-trading-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-paper_trading}
      REDIS_URL: redis://redis:6379
      PORT: 3001
      LOG_LEVEL: ${LOG_LEVEL:-info}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-internal-token}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Development volumes (only mounted in dev mode)
      - ./apps/backend:/app/apps/backend:${MOUNT_MODE:-rw}
      - ./packages/shared:/app/packages/shared:${MOUNT_MODE:-rw}
      - /app/node_modules
      - backend_logs:/app/apps/backend/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health/live', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - paper-trading-network

  # Frontend Web App
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: paper-trading-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:3001}
      VITE_APP_VERSION: ${APP_VERSION:-1.0.0}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      # Development volumes (only mounted in dev mode)
      - ./apps/frontend:/app/apps/frontend:${MOUNT_MODE:-rw}
      - ./packages/shared:/app/packages/shared:${MOUNT_MODE:-rw}
      - /app/node_modules
    restart: unless-stopped
    networks:
      - paper-trading-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: paper-trading-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - paper-trading-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: paper-trading-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - paper-trading-network

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: paper-trading-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - paper-trading-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  paper-trading-network:
    driver: bridge
    name: paper-trading-network